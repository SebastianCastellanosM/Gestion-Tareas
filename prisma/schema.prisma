generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid()) @db.VarChar(255)
  email         String         @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          Enum_RoleName  @default(USER)
  accounts      Account[]      @relation("AccountToUser") // Relación con Account
  sessions      Session[]
  projects      Project[]      @relation("UserProjects")
  tasks         Task[]    
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                 String  @id @default(cuid()) @db.VarChar(255)  // Se agregó un ID explícito
  userId             String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser") 

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid()) @db.VarChar(255)
  userId        String
  sessionToken  String   @unique
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  tasks       Task[]   // Relación con tareas
  users       User[]   @relation("UserProjects") // Relación inversa con usuarios
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  inProgress  Boolean  @default(false)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Enum_RoleName {
  ADMIN
  USER
}
